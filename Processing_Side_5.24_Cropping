
import processing.serial.*;
Serial myPort;
PImage testImage;
int rows;
int columns;

//Cropping Variables
int leftMarginAdjust;
int rightMarginAdjust;
int topMarginAdjust;
int bottomMarginAdjust;

void setup() {
  size(221,800);

//Set Up Serial Communication
  //printArray(Serial.list());
  myPort = new Serial(this, Serial.list()[0], 9600);
  myPort.bufferUntil('!');
  int goCheck = 0;
  while (goCheck != '!') {
    delay(1);
    goCheck = myPort.read();
  }  
  myPort.clear();
  //delay(2000);

//LOAD AND PREPARE IMAGE
  testImage = loadImage("Yomarie.jpg");
  testImage.filter(GRAY);
  testImage.resize(221, 0);
  testImage.loadPixels();
  rows = testImage.height;
  columns = testImage.width;
  
  //Set desired crop here. How many pixels off of each dimension.
  int leftCrop = 100;
  int rightCrop = 100;
  int topCrop = 250;
  int bottomCrop = 20;
  
  leftMarginAdjust = leftCrop;
  rightMarginAdjust = 221 - rightCrop;
  topMarginAdjust = rows - topCrop;
  bottomMarginAdjust = bottomCrop;
  
  for (int r = rows; r > 0; r--) {
    if (r % 2 == 0) {
      for (int c = columns; c >= 1; c--) {
        int pixelLocation = ( ( ( r - 1 ) * columns) + c - 1 );
        sendPixelData(pixelLocation);
      }
    }
    if (r % 2 == 1) {
      for (int c = 1; c <= columns; c++) {
        int pixelLocation = ( ( ( r - 1 ) * columns) + c - 1 );
        sendPixelData(pixelLocation);
      }
    }
  }
}







//FUNCTIONS

//Main Function

void sendPixelData(int i) {
    color pixelColor = testImage.pixels[i];
    float greyValue = red(pixelColor);
    int xDot = abs((i%221) - 221);
    int yDot = rows - ( ( i - (i % 221) ) / 221 ); 
    int depth = 0;
    //Code for Cropping
    if (xDot < leftMarginAdjust || xDot > rightMarginAdjust || yDot > topMarginAdjust || yDot < bottomMarginAdjust) {
      return;
    }
    if (greyValue > 232) {depth=0; return;} else
    if (greyValue > 209 && greyValue <=232) {depth=1;} else
    if (greyValue > 186 && greyValue <=209) {depth=2;} else
    if (greyValue > 163 && greyValue <=186) {depth=3;} else
    if (greyValue > 140 && greyValue <=163) {depth=4;} else
    if (greyValue > 117 && greyValue <=140) {depth=5;} else
    if (greyValue > 94 && greyValue <=117) {depth=6;} else
    if (greyValue > 71 && greyValue <=94) {depth=7;} else
    if (greyValue > 48 && greyValue <=71) {depth=8;} else
    if (greyValue > 25 && greyValue <=48) {depth=9;} else
    if (greyValue >= 0 && greyValue <=25) {depth=10;}
    int sumCheck = (xDot + yDot + depth)%221;
    writeDotDraw(xDot,yDot,depth,sumCheck);
    while (myPort.available() <= 0) {
      delay(1);
    }
    int check = myPort.read();
    while (check != '!') {
      myPort.write(xDot);
      myPort.write(yDot);
      myPort.write(depth);
      myPort.write(sumCheck);
      while (myPort.available() <=0) {
      delay(1);
      }
      check = myPort.read();
     }  
    myPort.clear();
  }



//Serial Functions

void writeDotDraw(int x, int y, int depth, int sumCheck) {
  myPort.write(4);
  myPort.write(x);
  myPort.write(y);
  myPort.write(depth);
  myPort.write(sumCheck);
  }

  //Accessory Functions

int roundDown(int x) {
  int roundedDown = x - (x%1);
  return roundedDown;
}
